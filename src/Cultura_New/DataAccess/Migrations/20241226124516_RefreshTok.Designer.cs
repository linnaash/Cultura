// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(Cultura_bdNewContext))]
    [Migration("20241226124516_RefreshTok")]
    partial class RefreshTok
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Analytic", b =>
                {
                    b.Property<int>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticsId"), 1L, 1);

                    b.Property<DateTime?>("CalculatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("MetricName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("MetricValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AnalyticsId")
                        .HasName("PK__Analytic__506974E33700B5A1");

                    b.HasIndex("EventId");

                    b.ToTable("Analytic", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Operation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("OperationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TableName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LogId")
                        .HasName("PK__AuditLog__5E548648248A1825");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Middlename")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Email" }, "UQ__Employee__A9D105347C263F44")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EmployeeTraining", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"), 1L, 1);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("TrainingName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TrainingId")
                        .HasName("PK__Employee__E8D71D82C696827E");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeTraining", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EmployeeWorkTime", b =>
                {
                    b.Property<int>("WorkTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTimeId"), 1L, 1);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("WorkTimeId")
                        .HasName("PK__Employee__E4A9C6397EB9C3B0");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EventId");

                    b.ToTable("EmployeeWorkTime", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<int?>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ResponsibleEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("VenueId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EventAttendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<string>("AttendeeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId")
                        .HasName("PK__EventAtt__8B69261C08F60E6C");

                    b.HasIndex("EventId");

                    b.ToTable("EventAttendance", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EventCategory", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventCategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventCategoryId");

                    b.HasIndex(new[] { "CategoryName" }, "UQ__EventCat__8517B2E03C345888")
                        .IsUnique()
                        .HasFilter("[CategoryName] IS NOT NULL");

                    b.ToTable("EventCategory", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EventFinance", b =>
                {
                    b.Property<int>("FinanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinanceId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("FinanceId")
                        .HasName("PK__EventFin__7917A89F9C973177");

                    b.HasIndex("EventId");

                    b.ToTable("EventFinance", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EventPlanning", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("PlanDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ResponsibleEmployeeId")
                        .HasColumnType("int");

                    b.HasKey("PlanId")
                        .HasName("PK__EventPla__755C22B7A9D1B463");

                    b.HasIndex("EventId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.ToTable("EventPlanning", (string)null);
                });

            modelBuilder.Entity("Domain.Models.EventTicket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TicketId")
                        .HasName("PK__EventTic__712CC607628B2B84");

                    b.HasIndex("EventId");

                    b.ToTable("EventTicket", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("AttendeeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackId");

                    b.HasIndex("EventId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MarketingCampaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"), 1L, 1);

                    b.Property<string>("CampaignName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("CampaignId")
                        .HasName("PK__Marketin__3F5E8A990097C070");

                    b.ToTable("MarketingCampaign", (string)null);
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("ReasonRevoked")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"), 1L, 1);

                    b.Property<string>("ResourceName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Sponsor", b =>
                {
                    b.Property<int>("SponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SponsorId"), 1L, 1);

                    b.Property<string>("SponsorName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SponsorId");

                    b.ToTable("Sponsor", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyId"), 1L, 1);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SupplyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SupplyId");

                    b.HasIndex("EventId");

                    b.ToTable("Supply", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueId"), 1L, 1);

                    b.Property<string>("VenueLocation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VenueName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("VenueId");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Volunteer", b =>
                {
                    b.Property<int>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VolunteerId"), 1L, 1);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("VolunteerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("VolunteerId");

                    b.HasIndex("EventId");

                    b.ToTable("Volunteer", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Analytic", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("Analytics")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Analytics_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.HasOne("Domain.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Employee_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Domain.Models.EmployeeTraining", b =>
                {
                    b.HasOne("Domain.Models.Employee", "Employee")
                        .WithMany("EmployeeTrainings")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeTraining_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Models.EmployeeWorkTime", b =>
                {
                    b.HasOne("Domain.Models.Employee", "Employee")
                        .WithMany("EmployeeWorkTimes")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeWorkTime_Employee");

                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("EmployeeWorkTimes")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EmployeeWorkTime_Event");

                    b.Navigation("Employee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.Event", b =>
                {
                    b.HasOne("Domain.Models.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .HasConstraintName("FK_Event_EventCategory");

                    b.HasOne("Domain.Models.Employee", "ResponsibleEmployee")
                        .WithMany("Events")
                        .HasForeignKey("ResponsibleEmployeeId")
                        .HasConstraintName("FK_Event_ResponsibleEmployee");

                    b.HasOne("Domain.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK_Event_Venue");

                    b.Navigation("EventCategory");

                    b.Navigation("ResponsibleEmployee");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Domain.Models.EventAttendance", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventAttendance_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.EventFinance", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("EventFinances")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventFinance_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.EventPlanning", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("EventPlannings")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPlanning_Event");

                    b.HasOne("Domain.Models.Employee", "ResponsibleEmployee")
                        .WithMany("EventPlannings")
                        .HasForeignKey("ResponsibleEmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EventPlanning_ResponsibleEmployee");

                    b.Navigation("Event");

                    b.Navigation("ResponsibleEmployee");
                });

            modelBuilder.Entity("Domain.Models.EventTicket", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("EventTickets")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventTicket_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Domain.Models.Employee", "Employee")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Models.Supply", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("Supplies")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Supply_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.Volunteer", b =>
                {
                    b.HasOne("Domain.Models.Event", "Event")
                        .WithMany("Volunteers")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Volunteer_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.Navigation("EmployeeTrainings");

                    b.Navigation("EmployeeWorkTimes");

                    b.Navigation("EventPlannings");

                    b.Navigation("Events");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Models.Event", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("EmployeeWorkTimes");

                    b.Navigation("EventAttendances");

                    b.Navigation("EventFinances");

                    b.Navigation("EventPlannings");

                    b.Navigation("EventTickets");

                    b.Navigation("Feedbacks");

                    b.Navigation("Supplies");

                    b.Navigation("Volunteers");
                });

            modelBuilder.Entity("Domain.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
